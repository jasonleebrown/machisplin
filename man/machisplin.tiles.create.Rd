% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/ensemble.machine.learning.thin.plate.splines.V73.R
\name{machisplin.tiles.create}
\alias{machisplin.tiles.create}
\title{Create sub-sampling grid for use in MACHISPLIN models}
\usage{
machisplin.tiles.create(
  rast.in,
  int.values,
  out.ncol = 3,
  out.nrow = 3,
  feather.d = 50
)
}
\arguments{
\item{rast.in}{high-resolution raster brick at total extent (final) of all downscaling.  This should be the rast.in in used in the machisplin.tiles.create function.}

\item{int.values}{a data frame with the first two columns as coordinates of interpolated site named exactly as 'long' and 'lat', in this order, and after, any number of layers to be downscaled; each as a new column}

\item{out.ncol}{number of columns in the processing grid}

\item{out.nrow}{number of rows in the processing grid}

\item{feather.d}{The number of pixels to feather the seams at end of analysis (in tool machisplin.merge.tiles). Default = 50}
}
\value{
This function splits the high-resolution raster brick into smaller tiles for downscaling using the machisplin.mltps function.  outputs performance values, the algorithm(s) used, and rasters for use in GIS output from the 'machisplin.mltps' function
}
\description{
Create sub-sampling grid for use in MACHISPLIN models
}
\examples{
library(MACHISPLIN)

# Import a csv 
Mydata	<-read.delim("sampling.csv", sep=",", h=T)

#load rasters to use as high resolution co-variates for downscaling
ALT = rast("SRTM30m.tif")
SLOPE = rast("ln_slope.tif")
ASPECT = rast("aspect.tif")
TWI = rast("TWI.tif")

# function input: raster stack of covarites
raster_stack<-c(ALT,SLOPE,TWI,ASPECT)

#sub-divide landscape into smaller units to facilite downscaling
tile<-machisplin.tiles.create(rast.in= raster_stack, int.values=Mydata,out.ncol=2, out.nrow=2, feather.d=50)

#run an ensemble machine learning thin plate spline - tile 1:4
interp.rast.1<-machisplin.mltps(int.values=tile$dat[[1]], covar.ras=tile$rast[[1]], tps=TRUE)
interp.rast.2<-machisplin.mltps(int.values=tile$dat[[2]], covar.ras=tile$rast[[2]], tps=TRUE)
interp.rast.3<-machisplin.mltps(int.values=tile$dat[[3]], covar.ras=tile$rast[[3]], tps=TRUE)
interp.rast.4<-machisplin.mltps(int.values=tile$dat[[4]], covar.ras=tile$rast[[4]], tps=TRUE)
}
